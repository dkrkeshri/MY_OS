!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	0	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
tid_t	appinf.h	/^typedef uint8_t tid_t;$/;"	t
sch_algo	appinf.h	/^typedef enum sch_algo$/;"	g
ROUND_ROBIN	appinf.h	/^  ROUND_ROBIN$/;"	e	enum:sch_algo
sch_algo_t	appinf.h	/^}sch_algo_t;$/;"	t	typeref:enum:sch_algo
app_thread_state	appinf.h	/^typedef enum app_thread_state$/;"	g
ready	appinf.h	/^  ready,$/;"	e	enum:app_thread_state
supend	appinf.h	/^  supend$/;"	e	enum:app_thread_state
app_thread_state_t	appinf.h	/^}app_thread_state_t;$/;"	t	typeref:enum:app_thread_state
thread	apptest.c	/^void *thread(void *arg)$/;"	f
test_thread_create	apptest.c	/^int test_thread_create()$/;"	f
main	apptest.c	/^int main()$/;"	f
app_thread_create	daemon.c	/^int app_thread_create(ppid_t *id, char *name, int priority, proc_entry_t proc_entry, void *arg, sch_algo_t sch_algo, app_thread_state_t start_state)$/;"	f
dispatch_event	event.c	/^int dispatch_event(ppid_t pid, int event, int time)$/;"	f
EVENT_H	event.h	2;"	d
event_node	event.h	/^typedef struct event_node$/;"	s
eid	event.h	/^   int eid;$/;"	m	struct:event_node
time	event.h	/^   int time;$/;"	m	struct:event_node
rem_time	event.h	/^   int rem_time;$/;"	m	struct:event_node
next	event.h	/^   struct event_node *next;$/;"	m	struct:event_node	typeref:struct:event_node::event_node
event_node_t	event.h	/^}event_node_t;$/;"	t	typeref:struct:event_node
event_list	event.h	/^typedef struct event_list$/;"	s
count	event.h	/^   int count;$/;"	m	struct:event_list
head	event.h	/^   event_node_t *head;$/;"	m	struct:event_list
last	event.h	/^   event_node_t *last;$/;"	m	struct:event_list
event_list_t	event.h	/^}event_list_t;$/;"	t	typeref:struct:event_list
TYPES_H	ktypes.h	2;"	d
ppid_t	ktypes.h	/^typedef uint8_t ppid_t;$/;"	t
main	main.c	/^int main()$/;"	f
process_node	process.c	/^typedef struct process_node$/;"	s	file:
process	process.c	/^   process_t process;$/;"	m	struct:process_node	file:
next	process.c	/^   struct process_node *next;$/;"	m	struct:process_node	typeref:struct:process_node::process_node	file:
process_node_t	process.c	/^}process_node_t;$/;"	t	typeref:struct:process_node	file:
ready_list	process.c	/^typedef struct ready_list$/;"	s	file:
count	process.c	/^   int count;$/;"	m	struct:ready_list	file:
head	process.c	/^   process_node_t *head;$/;"	m	struct:ready_list	file:
last	process.c	/^   process_node_t *last;$/;"	m	struct:ready_list	file:
ready_list_t	process.c	/^}ready_list_t;$/;"	t	typeref:struct:ready_list	file:
pid_allocator	process.c	/^typedef struct pid_allocator$/;"	s	file:
is_allocated	process.c	/^   uint8_t is_allocated;$/;"	m	struct:pid_allocator	file:
pid_allocator_t	process.c	/^}pid_allocator_t;$/;"	t	typeref:struct:pid_allocator	file:
process_manager	process.c	/^typedef struct process_manager$/;"	s	file:
ready	process.c	/^   ready_list_t ready;$/;"	m	struct:process_manager	file:
pids	process.c	/^   pid_allocator_t pids[MAX_PID];$/;"	m	struct:process_manager	file:
process_manager_t	process.c	/^}process_manager_t;$/;"	t	typeref:struct:process_manager	file:
map_ppid_to_proc_node	process.c	/^process_node_t *map_ppid_to_proc_node[MAX_PID] = {0};$/;"	v
process_mgr	process.c	/^process_manager_t process_mgr = {0};$/;"	v
generate_pid	process.c	/^ppid_t generate_pid()$/;"	f
create_process	process.c	/^int create_process(ppid_t *pid, char *name, int priority, void * (*proc_entry)(void *), void *arg)$/;"	f
print_proc	process.c	/^int print_proc(state_t state_queue)$/;"	f
get_event_list_for_pid	process.c	/^event_list_t *const get_event_list_for_pid(ppid_t pid)$/;"	f
print_event_pid	process.c	/^int print_event_pid(ppid_t pid)$/;"	f
run_process	process.c	/^int run_process(ppid_t pid)$/;"	f
get_proc_state	process.c	/^state_t get_proc_state(ppid_t pid)$/;"	f
PROCESS_H	process.h	2;"	d
MIN_PID	process.h	6;"	d
MAX_PID	process.h	7;"	d
state	process.h	/^typedef enum state$/;"	g
READY	process.h	/^   READY,$/;"	e	enum:state
SUSPEND	process.h	/^   SUSPEND$/;"	e	enum:state
state_t	process.h	/^}state_t;$/;"	t	typeref:enum:state
proc_entry_t	process.h	/^typedef void*(*proc_entry_t)(void *);$/;"	t
process	process.h	/^typedef struct process$/;"	s
pid	process.h	/^  ppid_t pid;$/;"	m	struct:process
name	process.h	/^  char *name;$/;"	m	struct:process
priority	process.h	/^  int priority;$/;"	m	struct:process
state	process.h	/^  state_t state;$/;"	m	struct:process
proc_entry	process.h	/^  proc_entry_t proc_entry;$/;"	m	struct:process
proc_args	process.h	/^  void *proc_args;$/;"	m	struct:process
event_list	process.h	/^  event_list_t event_list;$/;"	m	struct:process
process_t	process.h	/^}process_t;$/;"	t	typeref:struct:process
proc_entry	process_unit_test.c	/^void *proc_entry(void *arg)$/;"	f
proc_table	process_unit_test.c	/^typedef struct proc_table$/;"	s	file:
pid	process_unit_test.c	/^   ppid_t pid;$/;"	m	struct:proc_table	file:
name	process_unit_test.c	/^   char *name;$/;"	m	struct:proc_table	file:
priority	process_unit_test.c	/^   int priority;$/;"	m	struct:proc_table	file:
proc_entry	process_unit_test.c	/^   proc_entry_t proc_entry;$/;"	m	struct:proc_table	file:
arg	process_unit_test.c	/^   void *arg;$/;"	m	struct:proc_table	file:
proc_table_t	process_unit_test.c	/^}proc_table_t;$/;"	t	typeref:struct:proc_table	file:
test_procs	process_unit_test.c	/^proc_table_t test_procs[] ={$/;"	v
test_proc_mgr_create_process	process_unit_test.c	/^int test_proc_mgr_create_process()$/;"	f
test_proc_mgr_send_event	process_unit_test.c	/^int test_proc_mgr_send_event()$/;"	f
test_proc_mgr_run_process	process_unit_test.c	/^int test_proc_mgr_run_process()$/;"	f
main	process_unit_test.c	/^int main()$/;"	f
rr_sch_time_slice	rr.c	/^int rr_sch_time_slice;$/;"	v
rr_sch_crnt_time	rr.c	/^int rr_sch_crnt_time;$/;"	v
rr_sch_process_list	rr.c	/^rr_sch_process_list_t rr_sch_process_list = {.count=0, .head=NULL, .last=NULL, .crnt=NULL};$/;"	v
rr_sch_get_crnt_time	rr.c	/^int rr_sch_get_crnt_time()$/;"	f
rr_sch_tick	rr.c	/^int rr_sch_tick()$/;"	f
rr_sch_schedule_proc	rr.c	/^int rr_sch_schedule_proc(ppid_t *pid)$/;"	f
rr_sch_set_time_slice	rr.c	/^int rr_sch_set_time_slice(int _time_slice)$/;"	f
rr_sch_get_time_slice	rr.c	/^int rr_sch_get_time_slice()$/;"	f
rr_sch_add_process	rr.c	/^int rr_sch_add_process(ppid_t pid)$/;"	f
rr_sch_print_process	rr.c	/^int rr_sch_print_process()$/;"	f
rr_sch_get_crnt_process	rr.c	/^rr_sch_process_node_t const * const rr_sch_get_crnt_process()$/;"	f
MIN_TIME_SLICE	rr.h	4;"	d
MAX_TIME_SLICE	rr.h	5;"	d
TICK_INTERVAL	rr.h	6;"	d
rr_sch_process_node	rr.h	/^typedef struct rr_sch_process_node$/;"	s
pid	rr.h	/^   ppid_t pid;$/;"	m	struct:rr_sch_process_node
next	rr.h	/^   struct rr_sch_process_node *next;$/;"	m	struct:rr_sch_process_node	typeref:struct:rr_sch_process_node::rr_sch_process_node
rr_sch_process_node_t	rr.h	/^}rr_sch_process_node_t;$/;"	t	typeref:struct:rr_sch_process_node
rr_sch_process_list	rr.h	/^typedef struct rr_sch_process_list$/;"	s
count	rr.h	/^   int count;$/;"	m	struct:rr_sch_process_list
head	rr.h	/^   struct rr_sch_process_node *head;$/;"	m	struct:rr_sch_process_list	typeref:struct:rr_sch_process_list::rr_sch_process_node
last	rr.h	/^   struct rr_sch_process_node *last;$/;"	m	struct:rr_sch_process_list	typeref:struct:rr_sch_process_list::rr_sch_process_node
crnt	rr.h	/^   struct rr_sch_process_node *crnt;$/;"	m	struct:rr_sch_process_list	typeref:struct:rr_sch_process_list::rr_sch_process_node
rr_sch_process_list_t	rr.h	/^}rr_sch_process_list_t;$/;"	t	typeref:struct:rr_sch_process_list
test_rr_sch_check_time_slice	rr_unit_test.c	/^int test_rr_sch_check_time_slice()$/;"	f
test_rr_sch_process_list_add	rr_unit_test.c	/^int test_rr_sch_process_list_add()$/;"	f
test_rr_sch_schedule_proc	rr_unit_test.c	/^int test_rr_sch_schedule_proc()$/;"	f
main	rr_unit_test.c	/^int main()$/;"	f
TRUE	utils.h	4;"	d
FALSE	utils.h	5;"	d
FOR_ITEMS_IN	utils.h	6;"	d
DBG	utils.h	8;"	d
RR_SCH_ALLOC_HEAP_MEM	utils.h	10;"	d
RR_SCH_FREE_HEAP_MEM	utils.h	16;"	d
PROC_MGR_ALLOC_HEAP_MEM	utils.h	18;"	d
PROC_MGR_FREE_HEAP_MEM	utils.h	24;"	d
EVENT_MGR_ALLOC_HEAP_MEM	utils.h	26;"	d
EVENT_MGR_FREE_HEAP_MEM	utils.h	32;"	d
